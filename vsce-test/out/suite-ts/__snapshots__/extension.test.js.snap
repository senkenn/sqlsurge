// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Formatting Test Should be NOT formatted with save if config is disabled 1`] = `
"import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function main() {
  const todo = await prisma.$queryRaw\`SELECT * FROM todos WHERE id = 1;\`;
  await prisma.$queryRaw\`
    INSERT INTO todos
    (
        id,
        description,
        done
    )
    VALUES
    (
        1,
        "todo description",
        TRUE
    );
    \`;
  console.log(todo);
}

main()
  .then(async () => {
    await prisma.$disconnect();
    console.log("Disconnected");
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });
"
`;

exports[`Formatting Test Should be formatted with 2 tab size indent 1`] = `
"import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function main() {
  const todo = await prisma.$queryRaw\`    SELECT
      *
    FROM
      todos
    WHERE
      id = 1;\`;
  await prisma.$queryRaw\`
    INSERT INTO
      todos (id, description, done)
    VALUES
      (1, "todo description", TRUE);
    \`;
  console.log(todo);
}

main()
  .then(async () => {
    await prisma.$disconnect();
    console.log("Disconnected");
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });
"
`;

exports[`Formatting Test Should be formatted with command 1`] = `
"import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function main() {
  const todo = await prisma.$queryRaw\`SELECT
    *
FROM
    todos
WHERE
    id = 1;\`;
  await prisma.$queryRaw\`
INSERT INTO
    todos (id, description, done)
VALUES
    (1, "todo description", TRUE);
    \`;
  console.log(todo);
}

main()
  .then(async () => {
    await prisma.$disconnect();
    console.log("Disconnected");
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });
"
`;

exports[`Formatting Test Should be formatted with indent if config is enabled(default: off) 1`] = `
"import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function main() {
  const todo = await prisma.$queryRaw\`    SELECT
        *
    FROM
        todos
    WHERE
        id = 1;\`;
  await prisma.$queryRaw\`
    INSERT INTO
        todos (id, description, done)
    VALUES
        (1, "todo description", TRUE);
    \`;
  console.log(todo);
}

main()
  .then(async () => {
    await prisma.$disconnect();
    console.log("Disconnected");
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });
"
`;

exports[`Formatting Test Should be formatted with save if config is default(enabled) 1`] = `
"import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

async function main() {
  const todo = await prisma.$queryRaw\`SELECT
    *
FROM
    todos
WHERE
    id = 1;\`;
  await prisma.$queryRaw\`
INSERT INTO
    todos (id, description, done)
VALUES
    (1, "todo description", TRUE);
    \`;
  console.log(todo);
}

main()
  .then(async () => {
    await prisma.$disconnect();
    console.log("Disconnected");
  })
  .catch(async (e) => {
    console.error(e);
    await prisma.$disconnect();
    process.exit(1);
  });
"
`;

exports[`Formatting Test Should be formatted with user-defined function 1`] = `
"import { getConnection, query } from "./lib/db";

(async () => {
  const connection = getConnection();
  const someQuery = await query(
    connection,
    "SELECT * FROM todos WHERE id = $1;",
    [1],
  );

  await query(
    connection,
    \`
INSERT INTO
    todos (id, description, done)
VALUES
    ($1, "todo description", TRUE);
    \`,
    [1],
  );
})();
"
`;
