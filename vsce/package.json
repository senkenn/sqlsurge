{
  "name": "sqlsurge",
  "description": "SQL Language Server Extension for Visual Studio Code",
  "license": "MIT",
  "version": "0.5.4",
  "displayName": "sqlsurge",
  "private": true,
  "preview": true,
  "repository": {
    "type": "git",
    "url": "https://github.com/senkenn/sqlsurge"
  },
  "bugs": {
    "url": "https://github.com/senkenn/sqlsurge"
  },
  "publisher": "senken",
  "keywords": ["multi-root ready"],
  "categories": ["Programming Languages"],
  "icon": "resources/sqlsurge-icon.png",
  "engines": {
    "vscode": "^1.90.0"
  },
  "activationEvents": [
    "onLanguage:sql",
    "onLanguage:typescript",
    "onLanguage:javascript",
    "onLanguage:rust"
  ],
  "main": "./out/extension.js",
  "scripts": {
    "vscode:prepublish": "pnpm compile --mode production --devtool hidden-source-map",
    "clean": "node -e 'fs.rmSync(`out`, {recursive:true, force:true})'",
    "compile": "webpack",
    "watch": "webpack --watch",
    "test": "TEST_KIND=ut jest",
    "watch-tests": "tsc -p . -w",
    "package": "vsce package --no-dependencies",
    "publish": "vsce publish --no-dependencies"
  },
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "sqlsurge",
      "properties": {
        "sqlsurge.sqlLanguageServerFlags": {
          "type": "array",
          "default": [],
          "description": "Flags like -trace and -log to be used while running the language server."
        },
        "sqlsurge.formatOnSave": {
          "type": "boolean",
          "default": true,
          "description": "Format SQL on save."
        },
        "sqlsurge.formatSql.indent": {
          "type": "boolean",
          "default": false,
          "description": "Format SQL with indent."
        },
        "sqlsurge.formatSql.tabSize": {
          "type": "number",
          "default": 4,
          "description": "Indent size for SQL formatting."
        },
        "sqlsurge.customRawSqlQuery": {
          "type": "object",
          "title": "Custom Raw SQL Query",
          "description": "Customize the raw SQL query to be extracted. This feature is experimental. Feedback is welcome.",
          "default": {
            "language": "typescript",
            "configs": [
              {
                "functionName": "$queryRaw",
                "sqlArgNo": 1,
                "isTemplateLiteral": true
              }
            ]
          },
          "properties": {
            "language": {
              "type": "string",
              "description": "Language of the writing custom query.",
              "enum": ["typescript", "rust"]
            },
            "configs": {
              "type": "array",
              "description": "Custom query configuration.",
              "items": {
                "type": "object",
                "properties": {
                  "functionName": {
                    "type": "string",
                    "description": "Function name to be used for custom query."
                  },
                  "sqlArgNo": {
                    "type": "number",
                    "description": "Argument number of SQL query in the function. 1-based index(1 == first argument).",
                    "default": 1
                  },
                  "isMacro": {
                    "type": "boolean",
                    "description": "Whether the SQL query is in macro. Rust only."
                  },
                  "isTemplateLiteral": {
                    "type": "boolean",
                    "description": "Whether the SQL query is in template literal. TypeScript only."
                  }
                }
              }
            }
          }
        }
      }
    },
    "commands": [
      {
        "command": "sqlsurge.installSqls",
        "title": "sqlsurge: Install sqls"
      },
      {
        "command": "sqlsurge.formatSql",
        "title": "sqlsurge: Format SQL"
      }
    ],
    "grammars": [
      {
        "injectTo": [
          "source.js",
          "source.ts",
          "source.js.jsx",
          "source.jsx",
          "source.tsx",
          "source.vue"
        ],
        "scopeName": "source.ts.prismaClientRawSQL",
        "path": "./syntaxes/prismaClientRawSQL.json",
        "embeddedLanguages": {
          "meta.embedded.block.sql": "sql"
        }
      }
    ]
  },
  "devDependencies": {
    "@senken/config": "workspace:*",
    "@senken/sql-extraction-rs": "workspace:*",
    "@senken/sql-extraction-ts": "workspace:*",
    "@types/node": "^20.14.7",
    "@types/vscode": "^1.90.0",
    "@vscode/vsce": "^2.29.0",
    "colorette": "^2.0.20",
    "sql-formatter": "^15.3.2",
    "ts-jest": "^29.1.5",
    "ts-loader": "^9.5.1",
    "vscode-languageclient": "^9.0.1",
    "webpack": "^5.92.1",
    "webpack-cli": "^5.1.4"
  }
}
